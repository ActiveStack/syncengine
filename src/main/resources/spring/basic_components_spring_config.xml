<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
	http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
            id="corePlaceHolder">
        <property name="placeholderPrefix" value="$pf{" />
        <property name="placeholderSuffix" value="}" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="searchSystemEnvironment" value="true" />
        <property name="locations">
            <list>
                <value>classpath*:*.properties</value>
                <value>classpath*:properties/*.properties</value>
            </list>
        </property>
    </bean>

    <!-- <aop:aspectj-autoproxy/> <context:component-scan base-package="com.percero.agents.sync.aspects"
        /> -->

    <!-- ChangeWatcher Helpers -->
    <context:component-scan base-package="com.percero.amqp" />

    <!-- General Bean Definitions -->
    <context:component-scan base-package="com.percero.agents.sync.connectors" />
    <context:component-scan base-package="com.percero.agents.sync.helpers" />
    <context:component-scan base-package="com.percero.agents.sync.datastore" />
    <context:component-scan base-package="com.percero.agents.sync.hibernate" />
    <context:component-scan base-package="com.percero.agents.sync.services" />
    <context:component-scan base-package="com.percero.agents.sync.hibernate" />
    <context:component-scan base-package="com.percero.agents.sync.rr" />
    <context:component-scan base-package="com.percero.agents.sync.cache" />
    <context:component-scan base-package="com.percero.serial.map" />
    <context:component-scan base-package="com.percero.agents.auth.services" />
    <bean class="com.percero.serial.JsonDecoder" />

    <bean id="storeHistory" class="java.lang.Boolean">
        <constructor-arg value="$pf{storeHistory}" />
    </bean>

    <!-- AUTH AGENT -->
    <!-- Get Anon Auth parameters -->
    <bean id="anonAuthEnabled" class="java.lang.Boolean">
        <constructor-arg value="$pf{anonAuth.enabled}" />
    </bean>
    <bean id="anonAuthCode" class="java.lang.String">
        <constructor-arg value="$pf{anonAuth.code}" />
    </bean>
    <bean id="anonAuthRoleNames" class="java.lang.String">
        <constructor-arg value="$pf{anonAuth.roleNames}" />
    </bean>

    <!-- SYNC AGENT -->
    <bean id="guaranteeUpdateDelivery" class="java.lang.Boolean">
        <constructor-arg value="true" />
    </bean>

    <!-- Redis -->
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:use-pool="true"
          p:poolConfig-ref="redisPoolConfig"
          p:host-name="$pf{redis.host}" p:port="$pf{redis.port}" p:password="$pf{redis.password}">
    </bean>

    <bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" lazy-init="false"
          p:maxTotal="$pf{redis.maxTotal:10}"
          p:maxIdle="$pf{redis.maxIdle:8}"
          p:minIdle="$pf{redis.minIdle:1}"
          p:testOnBorrow="$pf{redis.testOnBorrow:true}"
          p:testOnReturn="$pf{redis.testOnReturn:true}"
          p:testWhileIdle="$pf{redis.testWhileIdle:true}"
          p:timeBetweenEvictionRunsMillis="$pf{redis.timeBetweenEvictionRunsMillis:60000}"
          p:numTestsPerEvictionRun="$pf{redis.numTestsPerEvictionRun:10}"
            />

    <bean id="redisTemplate" class="com.percero.agents.sync.services.PerceroRedisTemplate"
          p:connection-factory-ref="jedisConnectionFactory" />

    <bean id="userDeviceTimeout" class="java.lang.Long">
        <constructor-arg value="$pf{userDeviceTimeout}" />
    </bean>
    <bean id="cacheTimeout" class="java.lang.Long">
        <constructor-arg value="$pf{cacheTimeout}" />
    </bean>

    <!-- Tasks -->
    <task:annotation-driven />
    <task:executor id="executorWithCallerRunsPolicy"
                   pool-size="25-50" queue-capacity="0" rejection-policy="CALLER_RUNS" />

    <bean id="pushSyncHelper" class="com.percero.amqp.RabbitMQPushSyncHelper" />

    <bean id="accessManager" class="com.percero.agents.sync.access.RedisAccessManager" />

    <!-- Create RabbitMQ boilerplate objects needed by the worker -->
    <!--
<rabbit:connection-factory id="rabbitConnectionFactory"
    addresses="$pf{gateway.rabbitmq.addresses}"
    username="$pf{gateway.rabbitmq.login}" password="$pf{gateway.rabbitmq.password}" />
     -->
    <rabbit:connection-factory id="rabbitConnectionFactory"
                               host="$pf{gateway.rabbitmq.host}" port="$pf{gateway.rabbitmq.port}"
                               username="$pf{gateway.rabbitmq.login}" password="$pf{gateway.rabbitmq.password}" />
    <bean id="jsonConverter"
          class="org.springframework.amqp.support.converter.JsonMessageConverter" />
    <rabbit:template id="amqpTemplate" connection-factory="rabbitConnectionFactory"
                     message-converter="jsonConverter" />
    <rabbit:admin connection-factory="rabbitConnectionFactory" />


    <!-- ChangeWatcher -->
    <bean id="changeWatcherRouteName" class="java.lang.String">
        <constructor-arg value="changeWatcher" />
    </bean>
    <bean id="useChangeWatcherQueue" class="java.lang.Boolean">
        <constructor-arg value="$pf{changeWatcher.useQueue}" />
    </bean>
    <rabbit:queue name="changeWatcher" />
    <rabbit:queue name="checkChangeWatcher" />

    <!-- Database connection stuff -->
    <bean class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close" id="dataSource1">
        <property name="driverClass" value="$pf{databaseAuth.driverClassName}" />
        <property name="jdbcUrl"
                  value="$pf{databaseAuth.jdbcUrl}" />
        <property name="user" value="$pf{databaseAuth.username}" />
        <property name="password" value="$pf{databaseAuth.password}" />

        <!-- these are C3P0 properties -->
        <property name="acquireIncrement" value="1" />
        <property name="minPoolSize" value="2" />
        <property name="maxPoolSize" value="50" />
        <property name="maxIdleTime" value="300" />

        <!-- <property name="unreturnedConnectionTimeout" value="120"/> < ! - -
            this time is in seconds; so 2 minutes - - > <property name="debugUnreturnedConnectionStackTraces"
            value="true" /> -->
    </bean>

    <!-- flyway db -->
    <bean id="flyway-auth-clean" class="com.googlecode.flyway.core.Flyway"
          init-method="clean" depends-on="dataSource1" lazy-init="true">
        <property name="dataSource" ref="dataSource1" />
    </bean>

    <bean id="flyway-auth-init" class="com.googlecode.flyway.core.Flyway"
          init-method="init" depends-on="dataSource1" lazy-init="true">
        <property name="dataSource" ref="dataSource1" />
    </bean>

    <bean id="flyway-auth-migrate" class="com.googlecode.flyway.core.Flyway"
          init-method="migrate" depends-on="dataSource1" lazy-init="true">
        <property name="dataSource" ref="dataSource1" />
    </bean>

    <bean id="flyway-auth-main" class="com.percero.defaults.EmptyFlyway"
          depends-on="dataSource1">
        <property name="percClean" ref="$pf{flywayAuth.CleanClass}" />
        <property name="percInit" ref="$pf{flywayAuth.InitClass}" />
        <property name="percMigrate" ref="$pf{flywayAuth.MigrateClass}" />
    </bean>

    <bean id="sessionFactoryAuth"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
          depends-on="flyway-auth-main">
        <property name="dataSource" ref="dataSource1" />
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.MySQLDialect
                <!--
                hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
                -->
                hibernate.hbm2ddl.auto=$pf{databaseAuth.hibernate.hbm2ddl.auto:update}
                <!-- hibernate.ejb.naming_strategy" value="org.hibernate.cfg.ImprovedNamingStrategy"/> -->
                hibernate.show_sql=false
                hibernate.format_sql=false
                <!-- hibernate.current_session_context_class=org.hibernate.context.ThreadLocalSessionContext -->
                hibernate.connection.aggressive_release=true
                hibernate.jdbc.batch_size=20
                hibernate.connection.autocommit=false
                hibernate.enable_lazy_load_no_trans=true
            </value>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.percero.amqp</value>
                <value>com.percero.agents.auth.vo</value>
            </list>
        </property>
    </bean>

    <bean id="disabled" class="com.googlecode.flyway.core.Flyway" lazy-init="true">
        <property name="dataSource" ref="dataSource1" />
    </bean>
    <!-- flyway db - - >
    <bean id="flyway-project-clean" class="com.googlecode.flyway.core.Flyway"
          init-method="clean" depends-on="dataSourceProject" lazy-init="true">
        <property name="dataSource" ref="dataSourceProject" />
    </bean>

    <bean id="flyway-project-init" class="com.googlecode.flyway.core.Flyway"
          init-method="init" depends-on="dataSourceProject" lazy-init="true">
        <property name="dataSource" ref="dataSourceProject" />
    </bean>

    <bean id="flyway-project-migrate" class="com.googlecode.flyway.core.Flyway"
          init-method="migrate" depends-on="dataSourceProject" lazy-init="true">
        <property name="dataSource" ref="dataSourceProject" />
    </bean>

    <bean id="disabled" class="com.googlecode.flyway.core.Flyway" lazy-init="true">
        <property name="dataSource" ref="dataSourceProject" />
    </bean>

    <bean id="flyway-project-main" class="com.percero.defaults.EmptyFlyway"
          depends-on="dataSourceProject">
        <property name="percClean" ref="$pf{flywayProject.CleanClass}" />
        <property name="percInit" ref="$pf{flywayProject.InitClass}" />
        <property name="percMigrate" ref="$pf{flywayProject.MigrateClass}" />
    </bean>
    -->
    <bean id="txMan1"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactoryAuth" />
    </bean>
    <tx:annotation-driven transaction-manager="txMan1" />

    <!-- depends-on="flyway-auth-main" -->
    <!-- Project Database connection stuff - - >
    <bean class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close" id="dataSourceProject">
        <property name="driverClass" value="$pf{databaseProject.driverClassName}" />
        <property name="jdbcUrl"
                  value="$pf{databaseProject.jdbcUrl}" />
        <property name="user" value="$pf{databaseProject.username}" />
        <property name="password" value="$pf{databaseProject.password}" />

        < ! - - these are C3P0 properties - - >
        <property name="acquireIncrement" value="1" />
        <property name="minPoolSize" value="2" />
        <property name="maxPoolSize" value="80" />
        <property name="maxIdleTime" value="300" />

        < ! - - UNCOMMENT THIS TO IDENTIFY ANY CONNECTION POOL LEAKS <property name="unreturnedConnectionTimeout"
            value="120"/> < ! - - this time is in seconds; so 2 minutes - - > <property
            name="debugUnreturnedConnectionStackTraces" value="true" /> - - >
    </bean>

    <bean id="appSessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
          depends-on="flyway-project-main">
        <property name="dataSource" ref="dataSourceProject" />
        <property name="hibernateProperties">
            <value>
                < ! - - hibernate.dialect=org.hibernate.dialect.MySQLDialect - - >
                hibernate.dialect=org.hibernate.dialect.Oracle10gDialect

                < ! - -hibernate.hbm2ddl.auto=update- - >
                < ! - - hibernate.ejb.naming_strategy" value="org.hibernate.cfg.ImprovedNamingStrategy"/> - - >
                hibernate.show_sql=false
                hibernate.format_sql=false
                < ! - - hibernate.current_session_context_class=org.hibernate.context.ThreadLocalSessionContext - - >
                hibernate.connection.aggressive_release=true
                hibernate.jdbc.batch_size=20
                hibernate.connection.autocommit=false
                hibernate.connection.autoReconnect=true
                hibernate.enable_lazy_load_no_trans=true
            </value>
        </property>
        <property name="packagesToScan">
            <list>
                <value>$pf{domain.packageToScan}</value>
            </list>
        </property>
    </bean>
    <bean id="txManProject"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="appSessionFactory" />
    </bean>
    <tx:annotation-driven transaction-manager="txManProject" />
    -->

</beans>
